import path from "node:path";

import { syncKotlin, syncJavaScript, syncRepository, syncRust, syncSwift } from "./cli/sync";
import { parse, TranslatorJS, TranslatorKotlin, TranslatorTS } from "./index";
import { execute, mkdir, readInkJSON, readTextFile, write } from "./cli/helpers";
import { TranslatorRust } from "./translators/rust";
import { kebabCase, pascalCase, snakeCase } from "change-case";

async function main () {
  const args = process.argv.slice(2);
  const command = args.shift();

  switch (command) {
    case "sync": {
      // We don't catch the repository sync because it's crucial for the other syncs.
      await syncRepository();

      await syncJavaScript().catch(error => console.error("was not able to sync javascript, due to", error));
      await syncKotlin().catch(error => console.error("was not able to sync kotlin, due to", error));
      await syncRust().catch(error => console.error("was not able to sync rust, due to", error));
      await syncSwift().catch(error => console.error("was not able to sync swift, due to", error));
      break;
    }
    case "run": {
      const ink = await readInkJSON();
      const language = args.shift();
      const example = args.shift();

      if (!example || !ink.examples.includes(example)) {
        throw new Error(`unknown example: ${example}`);
      }

      if (language === "javascript") {
        await execute("tsx", ["examples/javascript/" + kebabCase(example) + ".mts"])
      }
      else if (language === "kotlin") {
        await execute("./gradlew", [":examples:kotlin:run", `-PmainClass=${pascalCase(example)}Kt`])
      }
      else if (language === "swift") {
        await execute("swift", ["build"]);
        await execute("swift", ["run", pascalCase(example)]);
      }
      else if (language === "rust") {
        await execute("cargo", ["run", "--example", snakeCase(example)]);
      }
      else {
        throw new Error(`unknown language: javascript, kotlin, swift, rust`);
      }

      break;
    }
    case "generate": {
      let header = `{} This file is generated by inklang, see <https://github.com/inklang/inklang>.\n{} Do not edit it directly since it'll be overwritten.\n\n`;

      const entrypoint = path.resolve("./src/main.ink");
      const code = await readTextFile(entrypoint);
      const statements = parse(code, entrypoint);

      switch (args.shift()) {
        case "javascript": {
          header = header.replaceAll("{}", "//");
          const cjs = header + new TranslatorJS(statements, "cjs").translate();
          const mjs = header + new TranslatorJS(statements, "mjs").translate();
          const dts = header + new TranslatorTS(statements).translate();

          await mkdir("generated/javascript");
          await write("generated/javascript/index.cjs", cjs);
          await write("generated/javascript/index.mjs", mjs);
          await write("generated/javascript/index.d.ts", dts);

          break;
        }
        case "kotlin": {
          const ink = await readInkJSON();
          header = header.replaceAll("{}", "//");
          const code = header + `package ${ink.package}\n\n` +  new TranslatorKotlin(statements).translate();

          const libSubPath = ink.package.replace(/\./g, "/");

          const libDir = `generated/kotlin/src/main/${libSubPath}`;
          await mkdir(libDir);
          await write(`${libDir}/${ink.displayName}.kt`, code);

          break;
        }
        case "rust": {
          header = header.replaceAll("{}", "//!");
          const code = header + new TranslatorRust(statements).translate();

          await mkdir("generated/rust");
          await write("generated/rust/lib.rs", code);

          // Automatically fix the code with known clippy lints.
          await execute("cargo", ["clippy", "--fix", "--allow-dirty", "--allow-staged"]);
          // Automatically format the code.
          await execute("cargo", ["fmt"]);

          break;
        }
        case "swift": {
          const ink = await readInkJSON();
          // TODO !!!!
          const code = `
            public func greet() -> String {
                return "Hello"
            }
          `;
          await mkdir("generated/swift");
          await write(`generated/swift/${ink.displayName}.swift`, code);
          break;
        }
        default: {
          throw new Error(`unknown language: javascript, kotlin, rust`);
        }
      }

      break;
    }
    default: {
      throw new Error(`unknown command, available: sync, generate`);
    }
  }
}

main();
